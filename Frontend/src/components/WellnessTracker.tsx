import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Progress } from './ui/progress';
import { Badge } from './ui/badge';
import { Checkbox } from './ui/checkbox';
import { 
  Droplets, 
  Moon, 
  Dumbbell, 
  Brain, 
  Clock, 
  Heart,
  Coffee,
  CheckCircle,
  AlertCircle,
  Plus
} from 'lucide-react';

interface WellnessTrackerProps {
  language: string;
}

interface WellnessMetric {
  id: string;
  name: string;
  icon: React.ReactNode;
  current: number;
  target: number;
  unit: string;
  color: string;
}

interface DailyTask {
  id: string;
  task: string;
  completed: boolean;
  priority: 'low' | 'medium' | 'high';
  category: 'study' | 'health' | 'personal';
}

export function WellnessTracker({ language }: WellnessTrackerProps) {
  const [wellnessMetrics, setWellnessMetrics] = useState<WellnessMetric[]>([
    {
      id: 'water',
      name: 'Water',
      icon: <Droplets className="w-4 h-4" />,
      current: 6,
      target: 8,
      unit: 'glasses',
      color: 'text-blue-500'
    },
    {
      id: 'sleep',
      name: 'Sleep',
      icon: <Moon className="w-4 h-4" />,
      current: 7,
      target: 8,
      unit: 'hours',
      color: 'text-purple-500'
    },
    {
      id: 'exercise',
      name: 'Exercise',
      icon: <Dumbbell className="w-4 h-4" />,
      current: 30,
      target: 60,
      unit: 'minutes',
      color: 'text-green-500'
    },
    {
      id: 'meditation',
      name: 'Meditation',
      icon: <Brain className="w-4 h-4" />,
      current: 10,
      target: 15,
      unit: 'minutes',
      color: 'text-orange-500'
    }
  ]);

  const [dailyTasks, setDailyTasks] = useState<DailyTask[]>([
    {
      id: '1',
      task: 'Complete Mathematics homework',
      completed: true,
      priority: 'high',
      category: 'study'
    },
    {
      id: '2',
      task: 'Take a 10-minute walk',
      completed: false,
      priority: 'medium',
      category: 'health'
    },
    {
      id: '3',
      task: 'Read for 30 minutes',
      completed: false,
      priority: 'medium',
      category: 'personal'
    },
    {
      id: '4',
      task: 'Practice deep breathing',
      completed: true,
      priority: 'low',
      category: 'health'
    }
  ]);

  const [currentTime, setCurrentTime] = useState(new Date());

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  const texts = {
    en: {
      wellnessTracker: 'Wellness Tracker',
      dailyPlanning: 'Daily Planning',
      healthMetrics: 'Health Metrics',
      todaysTasks: 'Today\'s Tasks',
      wellnessNudges: 'Wellness Nudges',
      hydrationReminder: 'Time to drink some water! ЁЯТз',
      breakReminder: 'You\'ve been studying for 2 hours. Take a 15-minute break!',
      posthureReminder: 'Remember to maintain good posture while studying',
      completed: 'Completed',
      pending: 'Pending',
      high: 'High',
      medium: 'Medium',
      low: 'Low',
      study: 'Study',
      health: 'Health',
      personal: 'Personal',
      addTask: 'Add Task',
      dailyGoal: 'Daily Goal',
      weeklyProgress: 'Weekly Progress',
      mindfulMoment: 'Take a mindful moment',
      breatheWith: 'Breathe with BestuAI'
    },
    hi: {
      wellnessTracker: 'рдХрд▓реНрдпрд╛рдг рдЯреНрд░реИрдХрд░',
      dailyPlanning: 'рджреИрдирд┐рдХ рдпреЛрдЬрдирд╛',
      healthMetrics: 'рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореЗрдЯреНрд░рд┐рдХреНрд╕',
      todaysTasks: 'рдЖрдЬ рдХреЗ рдХрд╛рд░реНрдп',
      wellnessNudges: 'рдХрд▓реНрдпрд╛рдг рд░рд┐рдорд╛рдЗрдВрдбрд░',
      hydrationReminder: 'рдкрд╛рдиреА рдкреАрдиреЗ рдХрд╛ рд╕рдордп! ЁЯТз',
      breakReminder: 'рдЖрдк 2 рдШрдВрдЯреЗ рд╕реЗ рдкрдврд╝рд╛рдИ рдХрд░ рд░рд╣реЗ рд╣реИрдВред 15 рдорд┐рдирдЯ рдХрд╛ рдмреНрд░реЗрдХ рд▓реЗрдВ!',
      posthureReminder: 'рдкрдврд╝рд╛рдИ рдХрд░рддреЗ рд╕рдордп рдЕрдЪреНрдЫреА рдореБрджреНрд░рд╛ рдмрдирд╛рдП рд░рдЦрдирд╛ рдпрд╛рдж рд░рдЦреЗрдВ',
      completed: 'рдкреВрд░реНрдг',
      pending: 'рд▓рдВрдмрд┐рдд',
      high: 'рдЙрдЪреНрдЪ',
      medium: 'рдордзреНрдпрдо',
      low: 'рдХрдо',
      study: 'рдЕрдзреНрдпрдпрди',
      health: 'рд╕реНрд╡рд╛рд╕реНрдереНрдп',
      personal: 'рд╡реНрдпрдХреНрддрд┐рдЧрдд',
      addTask: 'рдХрд╛рд░реНрдп рдЬреЛрдбрд╝реЗрдВ',
      dailyGoal: 'рджреИрдирд┐рдХ рд▓рдХреНрд╖реНрдп',
      weeklyProgress: 'рд╕рд╛рдкреНрддрд╛рд╣рд┐рдХ рдкреНрд░рдЧрддрд┐',
      mindfulMoment: 'рдПрдХ рд╕рдЪреЗрдд рдХреНрд╖рдг рд▓реЗрдВ',
      breatheWith: 'BestuAI рдХреЗ рд╕рд╛рде рд╕рд╛рдВрд╕ рд▓реЗрдВ'
    },
    mr: {
      wellnessTracker: 'рдХрд▓реНрдпрд╛рдг рдЯреНрд░реЕрдХрд░',
      dailyPlanning: 'рджреИрдирдВрджрд┐рди рдирд┐рдпреЛрдЬрди',
      healthMetrics: 'рдЖрд░реЛрдЧреНрдп рдореЗрдЯреНрд░рд┐рдХреНрд╕',
      todaysTasks: 'рдЖрдЬрдЪреА рдХрд╛рдореЗ',
      wellnessNudges: 'рдХрд▓реНрдпрд╛рдг рд╕реНрдорд░рдгрдкрддреНрд░реЗ',
      hydrationReminder: 'рдкрд╛рдгреА рдкрд┐рдгреНрдпрд╛рдЪреА рд╡реЗрд│! ЁЯТз',
      breakReminder: 'рддреБрдореНрд╣реА 2 рддрд╛рд╕ рдЕрднреНрдпрд╛рд╕ рдХрд░рдд рдЖрд╣рд╛рддред 15 рдорд┐рдирд┐рдЯрд╛рдВрдЪрд╛ рд╡рд┐рд╢реНрд░рд╛рдВрддреА рдШреНрдпрд╛!',
      posthureReminder: 'рдЕрднреНрдпрд╛рд╕ рдХрд░рддрд╛рдирд╛ рдЪрд╛рдВрдЧрд▓реА рдореБрджреНрд░рд╛ рдареЗрд╡рдгреЗ рд▓рдХреНрд╖рд╛рдд рдареЗрд╡рд╛',
      completed: 'рдкреВрд░реНрдг',
      pending: 'рдкреНрд░рд▓рдВрдмрд┐рдд',
      high: 'рдЙрдЪреНрдЪ',
      medium: 'рдордзреНрдпрдо',
      low: 'рдХрдореА',
      study: 'рдЕрднреНрдпрд╛рд╕',
      health: 'рдЖрд░реЛрдЧреНрдп',
      personal: 'рд╡реИрдпрдХреНрддрд┐рдХ',
      addTask: 'рдХрд╛рд░реНрдп рдЬреЛрдбрд╛',
      dailyGoal: 'рджреИрдирдВрджрд┐рди рдЙрджреНрджрд┐рд╖реНрдЯ',
      weeklyProgress: 'рдЖрдард╡рдбрд╛рднрд░рд╛рдЪреА рдкреНрд░рдЧрддреА',
      mindfulMoment: 'рдПрдХ рдЬрд╛рдЧрд░реВрдХ рдХреНрд╖рдг рдШреНрдпрд╛',
      breatheWith: 'BestuAI рд╕реЛрдмрдд рд╢реНрд╡рд╛рд╕ рдШреНрдпрд╛'
    },
    bn: {
      wellnessTracker: 'рж╕рзБрж╕рзНржерждрж╛ ржЯрзНрж░рзНржпрж╛ржХрж╛рж░',
      dailyPlanning: 'ржжрзИржиржирзНржжрж┐ржи ржкрж░рж┐ржХрж▓рзНржкржирж╛',
      healthMetrics: 'рж╕рзНржмрж╛рж╕рзНржерзНржп ржорзЗржЯрзНрж░рж┐ржХрзНрж╕',
      todaysTasks: 'ржЖржЬржХрзЗрж░ ржХрж╛ржЬржЧрзБрж▓рж┐',
      wellnessNudges: 'рж╕рзБрж╕рзНржерждрж╛ рж╕рзНржорж╛рж░ржХ',
      hydrationReminder: 'ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рж╛рж░ рж╕ржоржпрж╝! ЁЯТз',
      breakReminder: 'ржЖржкржирж┐ рзи ржШржирзНржЯрж╛ ржзрж░рзЗ ржкржбрж╝рж╛рж╢рзЛржирж╛ ржХрж░ржЫрзЗржиред рззрзл ржорж┐ржирж┐ржЯрзЗрж░ ржмрж┐рж░рждрж┐ ржирж┐ржи!',
      posthureReminder: 'ржкржбрж╝рж╛рж╢рзЛржирж╛рж░ рж╕ржоржпрж╝ ржнрж╛рж▓ ржнржЩрзНржЧрж┐ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрждрзЗ ржоржирзЗ рж░рж╛ржЦржмрзЗржи',
      completed: 'рж╕ржорзНржкржирзНржи',
      pending: 'ржорзБрж▓рждрзБржмрж┐',
      high: 'ржЙржЪрзНржЪ',
      medium: 'ржорж╛ржЭрж╛рж░рж┐',
      low: 'ржХржо',
      study: 'ржЕржзрзНржпржпрж╝ржи',
      health: 'рж╕рзНржмрж╛рж╕рзНржерзНржп',
      personal: 'ржмрзНржпржХрзНрждрж┐ржЧржд',
      addTask: 'ржХрж╛ржЬ ржпрзЛржЧ ржХрж░рзБржи',
      dailyGoal: 'ржжрзИржирж┐ржХ рж▓ржХрзНрж╖рзНржп',
      weeklyProgress: 'рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ ржЕржЧрзНрж░ржЧрждрж┐',
      mindfulMoment: 'ржПржХржЯрж┐ ржоржиржирж╢рзАрж▓ ржорзБрж╣рзВрж░рзНржд ржирж┐ржи',
      breatheWith: 'BestuAI ржПрж░ рж╕рж╛ржерзЗ рж╢рзНржмрж╛рж╕ ржирж┐ржи'
    },
    ta: {
      wellnessTracker: 'роиро▓рпНро╡ро╛ро┤рпНро╡рпБ роХрогрпНроХро╛рогро┐рокрпНрокрпБ',
      dailyPlanning: 'родро┐ройроЪро░ро┐ родро┐роЯрпНроЯрооро┐роЯро▓рпН',
      healthMetrics: 'роЖро░рпЛроХрпНроХро┐роп роЕро│ро╡рпАроЯрпБроХро│рпН',
      todaysTasks: 'роЗройрпНро▒рпИроп рокрогро┐роХро│рпН',
      wellnessNudges: 'роиро▓рпНро╡ро╛ро┤рпНро╡рпБ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН',
      hydrationReminder: 'родрогрпНрогрпАро░рпН роХрпБроЯро┐роХрпНроХрпБроорпН роирпЗро░роорпН! ЁЯТз',
      breakReminder: 'роирпАроЩрпНроХро│рпН 2 роорогро┐ роирпЗро░рооро╛роХ рокроЯро┐родрпНродрпБроХрпНроХрпКрогрпНроЯро┐ро░рпБроХрпНроХро┐ро▒рпАро░рпНроХро│рпН. 15 роиро┐рооро┐роЯ роЗроЯрпИро╡рпЗро│рпИ роОроЯрпБроЩрпНроХро│рпН!',
      posthureReminder: 'рокроЯро┐роХрпНроХрпБроорпНрокрпЛродрпБ роиро▓рпНро▓ родрпЛро▒рпНро▒родрпНродрпИ рокро░ро╛рооро░ро┐роХрпНроХ роиро┐ройрпИро╡ро┐ро▓рпН роХрпКро│рпНро│рпБроЩрпНроХро│рпН',
      completed: 'роорпБроЯро┐роирпНродродрпБ',
      pending: 'роиро┐ро▓рпБро╡рпИропро┐ро▓рпН',
      high: 'роЙропро░рпНроирпНрод',
      medium: 'роироЯрпБродрпНродро░',
      low: 'роХрпБро▒рпИроирпНрод',
      study: 'рокроЯро┐рокрпНрокрпБ',
      health: 'роЖро░рпЛроХрпНроХро┐ропроорпН',
      personal: 'родройро┐рокрпНрокроЯрпНроЯ',
      addTask: 'рокрогро┐ роЪрпЗро░рпНроХрпНроХро╡рпБроорпН',
      dailyGoal: 'родро┐ройроЪро░ро┐ роЗро▓роХрпНроХрпБ',
      weeklyProgress: 'ро╡ро╛ро░ро╛роирпНродро┐ро░ роорпБройрпНройрпЗро▒рпНро▒роорпН',
      mindfulMoment: 'роТро░рпБ роХро╡ройрооро╛рой родро░рпБрогроорпН роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН',
      breatheWith: 'BestuAI роЙроЯройрпН роорпВроЪрпНроЪрпБро╡ро┐роЯрпБроЩрпНроХро│рпН'
    },
    te: {
      wellnessTracker: 'р░╢р▒Нр░░р▒Зр░пр░╕р▒Нр░╕р▒Б р░Яр▒Нр░░р░╛р░Хр░░р▒Н',
      dailyPlanning: 'р░жр▒Ир░ир░┐р░Х р░кр▒Нр░░р░гр░╛р░│р░┐р░Х',
      healthMetrics: 'р░Жр░░р▒Лр░Чр▒Нр░п р░ор▒Жр░Яр▒Нр░░р░┐р░Хр▒Нр░╕р▒Н',
      todaysTasks: 'р░ир▒Зр░Яр░┐ р░кр░ир▒Бр░▓р▒Б',
      wellnessNudges: 'р░╢р▒Нр░░р▒Зр░пр░╕р▒Нр░╕р▒Б р░░р░┐р░ор▒Ир░Вр░бр░░р▒Нр░▓р▒Б',
      hydrationReminder: 'р░ир▒Ар░│р▒Нр░▓р▒Б р░др░╛р░Чр▒З р░╕р░ор░пр░В! ЁЯТз',
      breakReminder: 'р░ор▒Ар░░р▒Б 2 р░Чр░Вр░Яр░▓р▒Бр░Чр░╛ р░Ър░жр▒Бр░╡р▒Бр░др▒Бр░ир▒Нр░ир░╛р░░р▒Б. 15 р░ир░┐р░ор░┐р░╖р░╛р░▓ р░╡р░┐р░░р░╛р░ор░В р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐!',
      posthureReminder: 'р░Ър░жр▒Бр░╡р▒Бр░др▒Бр░ир▒Нр░ир░кр▒Нр░кр▒Бр░бр▒Б р░ор░Вр░Ър░┐ р░нр░Вр░Чр░┐р░ор░ир▒Б р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░╛р░▓р░ир░┐ р░Чр▒Бр░░р▒Нр░др▒Бр░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
      completed: 'р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐',
      pending: 'р░кр▒Жр░Вр░бр░┐р░Вр░Чр▒Н',
      high: 'р░Ер░зр░┐р░Х',
      medium: 'р░ор░зр▒Нр░пр░о',
      low: 'р░др░Хр▒Нр░Хр▒Бр░╡',
      study: 'р░Ер░зр▒Нр░пр░пр░ир░В',
      health: 'р░Жр░░р▒Лр░Чр▒Нр░пр░В',
      personal: 'р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д',
      addTask: 'р░кр░ир░┐ р░Ьр▒Лр░бр░┐р░Вр░Ър░Вр░бр░┐',
      dailyGoal: 'р░жр▒Ир░ир░┐р░Х р░▓р░Хр▒Нр░╖р▒Нр░пр░В',
      weeklyProgress: 'р░╡р░╛р░░р░кр▒Б р░кр▒Бр░░р▒Лр░Чр░др░┐',
      mindfulMoment: 'р░Тр░Х р░ор▒Ир░Вр░бр▒НтАМр░лр▒Бр░▓р▒Н р░Хр▒Нр░╖р░гр░В р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐',
      breatheWith: 'BestuAI р░др▒Л р░╢р▒Нр░╡р░╛р░╕ р░др▒Ар░╕р▒Бр░Хр▒Лр░Вр░бр░┐'
    },
    gu: {
      wellnessTracker: 'ркЖрк░рлЛркЧрлНркп ркЯрлНрк░рлЗркХрк░',
      dailyPlanning: 'ркжрлИркирк┐ркХ ркЖркпрлЛркЬрки',
      healthMetrics: 'ркЖрк░рлЛркЧрлНркп ркорлЗркЯрлНрк░рк┐ркХрлНрк╕',
      todaysTasks: 'ркЖркЬркирк╛ ркХрк╛рк░рлНркпрлЛ',
      wellnessNudges: 'ркЖрк░рлЛркЧрлНркп рк░рк┐ркорк╛ркЗркирлНркбрк░',
      hydrationReminder: 'рккрк╛ркгрлА рккрлАрк╡рк╛ркирлЛ рк╕ркоркп! ЁЯТз',
      breakReminder: 'ркдркорлЗ 2 ркХрк▓рк╛ркХркерлА ркЕркнрлНркпрк╛рк╕ ркХрк░рлА рк░рк╣рлНркпрк╛ ркЫрлЛ. 15 ркорк┐ркирк┐ркЯ рк╡рк┐рк░рк╛рко рк▓рлЛ!',
      posthureReminder: 'ркЕркнрлНркпрк╛рк╕ ркХрк░ркдрлА рк╡ркЦркдрлЗ рк╕рк╛рк░рлА ркорлБркжрлНрк░рк╛ ркЬрк╛рк│рк╡рк╡рк╛ркирлБркВ ркпрк╛ркж рк░рк╛ркЦрлЛ',
      completed: 'рккрлВрк░рлНркг',
      pending: 'ркмрк╛ркХрлА',
      high: 'ркЙркЪрлНркЪ',
      medium: 'ркоркзрлНркпрко',
      low: 'ркирлАркЪрлБркВ',
      study: 'ркЕркнрлНркпрк╛рк╕',
      health: 'ркЖрк░рлЛркЧрлНркп',
      personal: 'рк╡рлНркпркХрлНркдрк┐ркЧркд',
      addTask: 'ркХрк╛рк░рлНркп ркЙркорлЗрк░рлЛ',
      dailyGoal: 'ркжрлИркирк┐ркХ рк▓ркХрлНрк╖рлНркп',
      weeklyProgress: 'рк╕рк╛рккрлНркдрк╛рк╣рк┐ркХ рккрлНрк░ркЧркдрк┐',
      mindfulMoment: 'ркПркХ ркоркирккрлВрк░рлНрк╡ркХ ркХрлНрк╖ркг рк▓рлЛ',
      breatheWith: 'BestuAI рк╕рк╛ркерлЗ рк╢рлНрк╡рк╛рк╕ рк▓рлЛ'
    },
    kn: {
      wellnessTracker: 'р▓пр│Лр▓Чр▓Хр│Нр▓╖р│Зр▓о р▓Яр│Нр▓░р│Нр▓пр▓╛р▓Хр▓░р│Н',
      dailyPlanning: 'р▓жр│Ир▓ир▓Вр▓жр▓┐р▓и р▓пр│Лр▓Ьр▓ир│Ж',
      healthMetrics: 'р▓Жр▓░р│Лр▓Чр│Нр▓п р▓ор│Жр▓Яр│Нр▓░р▓┐р▓Хр│Нр▓╕р│Н',
      todaysTasks: 'р▓Зр▓Вр▓жр▓┐р▓и р▓Хр▓╛р▓░р│Нр▓пр▓Чр▓│р│Б',
      wellnessNudges: 'р▓пр│Лр▓Чр▓Хр│Нр▓╖р│Зр▓о р▓Ьр│Нр▓Юр▓╛р▓кр▓ир│Жр▓Чр▓│р│Б',
      hydrationReminder: 'р▓ир│Ар▓░р│Б р▓Хр│Бр▓бр▓┐р▓пр│Бр▓╡ р▓╕р▓ор▓п! ЁЯТз',
      breakReminder: 'р▓ир│Ар▓╡р│Б 2 р▓Чр▓Вр▓Яр│Жр▓Чр▓│р▓┐р▓Вр▓ж р▓Ер▓зр│Нр▓пр▓пр▓и р▓ор▓╛р▓бр│Бр▓др│Нр▓др▓┐р▓жр│Нр▓жр│Ар▓░р▓┐. 15 р▓ир▓┐р▓ор▓┐р▓╖р▓Чр▓│ р▓╡р▓┐р▓░р▓╛р▓о р▓др│Жр▓Чр│Жр▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐!',
      posthureReminder: 'р▓Ер▓зр│Нр▓пр▓пр▓и р▓ор▓╛р▓бр│Бр▓╡р▓╛р▓Ч р▓Йр▓др│Нр▓др▓о р▓нр▓Вр▓Чр▓┐р▓пр▓ир│Нр▓ир│Б р▓Хр▓╛р▓кр▓╛р▓бр▓┐р▓Хр│Кр▓│р│Нр▓│р▓▓р│Б р▓ир│Жр▓ир▓кр▓┐р▓╕р▓┐р▓Хр│Кр▓│р│Нр▓│р▓┐',
      completed: 'р▓кр│Вр▓░р│Нр▓гр▓Чр│Кр▓Вр▓бр▓┐р▓жр│Ж',
      pending: 'р▓мр▓╛р▓Хр▓┐',
      high: 'р▓╣р│Жр▓Ър│Нр▓Ър│Б',
      medium: 'р▓ор▓зр│Нр▓пр▓о',
      low: 'р▓Хр▓бр▓┐р▓ор│Ж',
      study: 'р▓Ер▓зр│Нр▓пр▓пр▓и',
      health: 'р▓Жр▓░р│Лр▓Чр│Нр▓п',
      personal: 'р▓╡р│Ир▓пр▓Хр│Нр▓др▓┐р▓Х',
      addTask: 'р▓Хр▓╛р▓░р│Нр▓п р▓╕р│Зр▓░р▓┐р▓╕р▓┐',
      dailyGoal: 'р▓жр│Ир▓ир▓Вр▓жр▓┐р▓и р▓Чр│Бр▓░р▓┐',
      weeklyProgress: 'р▓╕р▓╛р▓кр│Нр▓др▓╛р▓╣р▓┐р▓Х р▓кр│Нр▓░р▓Чр▓др▓┐',
      mindfulMoment: 'р▓Тр▓Вр▓жр│Б р▓пр│Лр▓Ър▓ир▓╛р▓╢р│Ар▓▓ р▓Хр│Нр▓╖р▓г р▓др│Жр▓Чр│Жр▓жр│Бр▓Хр│Кр▓│р│Нр▓│р▓┐',
      breatheWith: 'BestuAI р▓Ьр│Кр▓др│Ж р▓Йр▓╕р▓┐р▓░р▓╛р▓бр▓┐'
    },
    ml: {
      wellnessTracker: 'р┤Хр╡Нр┤╖р╡Зр┤о р┤Яр╡Нр┤░р┤╛р┤Хр╡Нр┤Хр╡╝',
      dailyPlanning: 'р┤жр╡Ир┤ир┤Вр┤жр┤┐р┤и р┤Жр┤╕р╡Вр┤др╡Нр┤░р┤гр┤В',
      healthMetrics: 'р┤Жр┤░р╡Лр┤Чр╡Нр┤п р┤ор╡Жр┤Яр╡Нр┤░р┤┐р┤Хр╡Нр┤╕р╡Н',
      todaysTasks: 'р┤Зр┤ир╡Нр┤ир┤др╡Нр┤др╡Ж р┤Ьр╡Лр┤▓р┤┐р┤Хр╡╛',
      wellnessNudges: 'р┤Хр╡Нр┤╖р╡Зр┤о р┤Ур╡╝р┤ор╡Нр┤ор┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤др╡Нр┤др┤▓р╡Бр┤Хр╡╛',
      hydrationReminder: 'р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤Хр╡Бр┤Яр┤┐р┤Хр╡Нр┤Хр┤╛р┤ир╡Бр┤│р╡Нр┤│ р┤╕р┤ор┤пр┤В! ЁЯТз',
      breakReminder: 'р┤ир┤┐р┤Щр╡Нр┤Щр╡╛ 2 р┤ор┤гр┤┐р┤Хр╡Нр┤Хр╡Вр┤▒р┤╛р┤пр┤┐ р┤кр┤ар┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б. 15 р┤ор┤┐р┤ир┤┐р┤▒р╡Нр┤▒р╡Н р┤Зр┤Яр┤╡р╡Зр┤│ р┤Ор┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х!',
      posthureReminder: 'р┤кр┤ар┤┐р┤Хр╡Нр┤Хр╡Бр┤ор╡Нр┤кр╡Лр╡╛ р┤ир┤▓р╡Нр┤▓ р┤нр┤╛р┤╡р┤В р┤ир┤┐р┤▓р┤ир┤┐р╡╝р┤др╡Нр┤др┤╛р╡╗ р┤Ур╡╝р┤Хр╡Нр┤Хр╡Бр┤Х',
      completed: 'р┤кр╡Вр╡╝р┤др╡Нр┤др┤┐р┤пр┤╛р┤пр┤┐',
      pending: 'р┤др╡Ар╡╝р┤кр╡Нр┤кр╡Бр┤Хр╡╜р┤кр╡Нр┤кр┤┐р┤Хр╡Нр┤Хр┤╛р┤др╡Нр┤д',
      high: 'р┤Йр┤пр╡╝р┤ир╡Нр┤и',
      medium: 'р┤Зр┤Яр┤др╡Нр┤др┤░р┤В',
      low: 'р┤Хр╡Бр┤▒р┤Юр╡Нр┤Ю',
      study: 'р┤кр┤ар┤ир┤В',
      health: 'р┤Жр┤░р╡Лр┤Чр╡Нр┤пр┤В',
      personal: 'р┤╡р╡Нр┤пр┤Хр╡Нр┤др┤┐р┤Чр┤д',
      addTask: 'р┤Ьр╡Лр┤▓р┤┐ р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х',
      dailyGoal: 'р┤жр╡Ир┤ир┤Вр┤жр┤┐р┤и р┤▓р┤Хр╡Нр┤╖р╡Нр┤пр┤В',
      weeklyProgress: 'р┤кр╡Нр┤░р┤╛р┤кр╡Нр┤др┤ор┤╛р┤п р┤кр╡Бр┤░р╡Лр┤Чр┤др┤┐',
      mindfulMoment: 'р┤Тр┤░р╡Б р┤ор╡Ир┤ир╡Нр┤▒р┤лр╡Бр╡╛ р┤ир┤┐р┤ор┤┐р┤╖р┤В р┤Ор┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х',
      breatheWith: 'BestuAI р┤пр╡Бр┤ор┤╛р┤пр┤┐ р┤╢р╡Нр┤╡р┤╕р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х'
    },
    pa: {
      wellnessTracker: 'ри╕ри┐ри╣рид риЯри░рйИриХри░',
      dailyPlanning: 'ри░рйЛриЬри╝ри╛риири╛ рипрйЛриЬриири╛римрй░рижрйА',
      healthMetrics: 'ри╕ри┐ри╣рид риорйИриЯрйНри░ри┐риХри╕',
      todaysTasks: 'риЕрй▒риЬ рижрйЗ риХрй░рио',
      wellnessNudges: 'ри╕ри┐ри╣рид рипри╛рижрижри╣ри╛риирйА',
      hydrationReminder: 'рикри╛ригрйА рикрйАриг рижри╛ ри╕риори╛риВ! ЁЯТз',
      breakReminder: 'ридрйБри╕рйАриВ 2 риШрй░риЯрйЗ ридрйЛриВ рикрйЬрйНри╣ри╛риИ риХри░ ри░ри╣рйЗ ри╣рйЛред 15 риори┐рй░риЯ рижри╛ римрйНри░рйЗриХ ри▓риУ!',
      posthureReminder: 'рикрйЬрйНри╣ри╛риИ риХри░рижрйЗ ри╕риорйЗриВ риЪрй░риЧрйА риорйБрижри░ри╛ римригри╛риИ ри░рй▒риЦригри╛ рипри╛риж ри░рй▒риЦрйЛ',
      completed: 'рикрйВри░ри╛',
      pending: 'римри╛риХрйА',
      high: 'риЙрй▒риЪри╛',
      medium: 'риорй▒ризрио',
      low: 'риШрй▒риЯ',
      study: 'рикрйЬрйНри╣ри╛риИ',
      health: 'ри╕ри┐ри╣рид',
      personal: 'риири┐рй▒риЬрйА',
      addTask: 'риХрй░рио ри╕ри╝ри╛риори▓ риХри░рйЛ',
      dailyGoal: 'ри░рйЛриЬри╝ри╛риири╛ риЯрйАриЪри╛',
      weeklyProgress: 'ри╣рилри╝ридри╛ри╡ри╛ри░рйА ридри░рй▒риХрйА',
      mindfulMoment: 'риЗрй▒риХ ри╕рйБриЪрйЗрид рикри▓ ри▓риУ',
      breatheWith: 'BestuAI риири╛ри▓ ри╕ри╛ри╣ ри▓риУ'
    },
    or: {
      wellnessTracker: 'рм╕рнБрм╕рнНрмермдрм╛ рмЯрнНрм░рм╛рмХрм░',
      dailyPlanning: 'рмжрнИрмирмирнНрмжрм┐рми рмпрнЛрмЬрмирм╛',
      healthMetrics: 'рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рморнЗрмЯрнНрм░рм┐рмХрнНрм╕',
      todaysTasks: 'рмЖрмЬрм┐рм░ рмХрм╛рм░рнНрмпрнНрнЯ',
      wellnessNudges: 'рм╕рнБрм╕рнНрмермдрм╛ рм╕рнНрморм╛рм░рмХ',
      hydrationReminder: 'рмкрм╛рмгрм┐ рмкрм┐рмЗрммрм╛рм░ рм╕рморнЯ! ЁЯТз',
      breakReminder: 'рмЖрмкрмг рни рмШрмгрнНрмЯрм╛ рмзрм░рм┐ рмЕрмзрнНрнЯрнЯрми рмХрм░рнБрмЫрмирнНрмдрм┐ред рнзрнл рморм┐рмирм┐рмЯрнН рммрм┐рм░рм╛рмо рмирм┐рмЕрмирнНрмдрнБ!',
      posthureReminder: 'рмЕрмзрнНрнЯрнЯрми рмХрм░рм┐рммрм╛ рм╕рморнЯрм░рнЗ рмнрм▓ рморнБрмжрнНрм░рм╛ рм░рмЦрм┐рммрм╛рмХрнБ рмормирнЗрм░рмЦрмирнНрмдрнБ',
      completed: 'рм╕рморнНрмкрнВрм░рнНрмгрнНрмг',
      pending: 'рммрм┐рмЪрм╛рм░рм╛рмзрнАрми',
      high: 'рмЙрмЪрнНрмЪ',
      medium: 'рмормзрнНрнЯрмо',
      low: 'рмХрморнН',
      study: 'рмЕрмзрнНрнЯрнЯрми',
      health: 'рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ',
      personal: 'рммрнНрнЯрмХрнНрмдрм┐рмЧрмд',
      addTask: 'рмХрм╛рм░рнНрмпрнНрнЯ рмпрнЛрмЧ рмХрм░рмирнНрмдрнБ',
      dailyGoal: 'рмжрнИрмирм┐рмХ рм▓рмХрнНрм╖рнНрнЯ',
      weeklyProgress: 'рм╕рм╛рмкрнНрмдрм╛рм╣рм┐рмХ рмЕрмЧрнНрм░рмЧрмдрм┐',
      mindfulMoment: 'рмПрмХ рм╕рмЪрнЗрмдрми рморнБрм╣рнВрм░рнНрмдрнНрмд рмирм┐рмЕрмирнНрмдрнБ',
      breatheWith: 'BestuAI рм╕рм╣рм┐рмд рмирм┐рм╢рнНрн▒рм╛рм╕ рмирм┐рмЕрмирнНрмдрнБ'
    },
    as: {
      wellnessTracker: 'рж╕рзБрж╕рзНржмрж╛рж╕рзНржерзНржп ржЯрзНрз░рзЗржХрж╛рз░',
      dailyPlanning: 'ржжрзИржиржирзНржжрж┐ржи ржкрз░рж┐ржХрж▓рзНржкржирж╛',
      healthMetrics: 'рж╕рзНржмрж╛рж╕рзНржерзНржп ржорзЗржЯрзНрз░рж┐ржХрзНрж╕',
      todaysTasks: 'ржЖржЬрж┐рз░ ржХрж╛ржоржмрзЛрз░',
      wellnessNudges: 'рж╕рзБрж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рзНржорж╛рз░ржХ',
      hydrationReminder: 'ржкрж╛ржирзА ржЦрзЛрз▒рж╛рз░ рж╕ржоржпрж╝! ЁЯТз',
      breakReminder: 'ржЖржкрзБржирж┐ рзи ржШржгрзНржЯрж╛ ржзрз░рж┐ ржЕржзрзНржпржпрж╝ржи ржХрз░рж┐ ржЖржЫрзЗред рззрзл ржорж┐ржирж┐ржЯ ржмрж┐рз░рждрж┐ рж▓ржУржХ!',
      posthureReminder: 'ржЕржзрзНржпржпрж╝ржи ржХрз░рзЛржБрждрзЗ ржнрж╛рж▓ ржнржЩрзНржЧрзАржорж╛ рз░рж╛ржЦрж┐ржмрж▓рзИ ржоржиржд рз░рж╛ржЦрж┐ржм',
      completed: 'рж╕ржорзНржкрзВрз░рзНржг',
      pending: 'ржмрж┐ржЪрж╛рз░рж╛ржзрзАржи',
      high: 'ржЙржЪрзНржЪ',
      medium: 'ржоржзрзНржпржорзАржпрж╝рж╛',
      low: 'ржХржо',
      study: 'ржЕржзрзНржпржпрж╝ржи',
      health: 'рж╕рзНржмрж╛рж╕рзНржерзНржп',
      personal: 'ржмрзНржпржХрзНрждрж┐ржЧржд',
      addTask: 'ржХрж╛ржо ржпрзЛржЧ ржХрз░ржХ',
      dailyGoal: 'ржжрзИржиржирзНржжрж┐ржи рж▓ржХрзНрж╖рзНржп',
      weeklyProgress: 'рж╕рж╛ржкрзНрждрж╛рж╣рж┐ржХ ржЕржЧрзНрз░ржЧрждрж┐',
      mindfulMoment: 'ржПржЯрж╛ рж╕ржЪрзЗрждржи ржорзБрж╣рзВрз░рзНржд рж▓ржУржХ',
      breatheWith: 'BestuAI рз░ рж╕рзИрждрзЗ ржЙрж╢рж╛рж╣ рж▓ржУржХ'
    },
    ur: {
      wellnessTracker: '╪к┘Ж╪п╪▒╪│╪к█М ┘╣╪▒█М┌й╪▒',
      dailyPlanning: '╪▒┘И╪▓╪з┘Ж█Б ┘Е┘Ж╪╡┘И╪и█Б ╪и┘Ж╪п█М',
      healthMetrics: '╪╡╪н╪к ┌й█М ┘╛█М┘Е╪з╪ж╪┤',
      todaysTasks: '╪в╪м ┌й█Т ┌й╪з┘Е',
      wellnessNudges: '╪к┘Ж╪п╪▒╪│╪к█М ┌й█М █М╪з╪п╪п█Б╪з┘Ж█М',
      hydrationReminder: '┘╛╪з┘Ж█М ┘╛█М┘Ж█Т ┌й╪з ┘И┘В╪к! ЁЯТз',
      breakReminder: '╪в┘╛ 2 ┌п┌╛┘Ж┘╣█Т ╪│█Т ┘╛┌С┌╛ ╪▒█Б█Т █Б█М┌║█Ф 15 ┘Е┘Ж┘╣ ┌й╪з ┘И┘В┘Б█Б ┘Д█М┌║!',
      posthureReminder: '┘╛┌С┌╛╪к█Т ┘И┘В╪к ╪з┌Ж┌╛█М ┌й╪▒┘Ж╪│█М ╪и╪▒┘В╪▒╪з╪▒ ╪▒┌й┌╛┘Ж╪з █М╪з╪п ╪▒┌й┌╛█М┌║',
      completed: '┘Е┌й┘Е┘Д',
      pending: '╪▓█М╪▒ ╪з┘Д╪к┘И╪з╪б',
      high: '╪▓█М╪з╪п█Б',
      medium: '╪п╪▒┘Е█М╪з┘Ж█М',
      low: '┌й┘Е',
      study: '┘Е╪╖╪з┘Д╪╣█Б',
      health: '╪╡╪н╪к',
      personal: '╪░╪з╪к█М',
      addTask: '┌й╪з┘Е ╪┤╪з┘Е┘Д ┌й╪▒█М┌║',
      dailyGoal: '╪▒┘И╪▓╪з┘Ж█Б █Б╪п┘Б',
      weeklyProgress: '█Б┘Б╪к█Б ┘И╪з╪▒ ┘╛█М╪┤ ┘В╪п┘Е█М',
      mindfulMoment: '╪з█М┌й ╪и╪з ╪┤╪╣┘И╪▒ ┘Д┘Е╪н█Б ┘Д█М┌║',
      breatheWith: 'BestuAI ┌й█Т ╪│╪з╪к┌╛ ╪│╪з┘Ж╪│ ┘Д█М┌║'
    }
  };

  const t = texts[language as keyof typeof texts] || texts.en;

  const updateMetric = (id: string, increment: number) => {
    setWellnessMetrics(prev => 
      prev.map(metric => 
        metric.id === id 
          ? { ...metric, current: Math.min(metric.current + increment, metric.target) }
          : metric
      )
    );
  };

  const toggleTask = (id: string) => {
    setDailyTasks(prev =>
      prev.map(task =>
        task.id === id ? { ...task, completed: !task.completed } : task
      )
    );
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'study': return <Coffee className="w-4 h-4" />;
      case 'health': return <Heart className="w-4 h-4" />;
      case 'personal': return <Clock className="w-4 h-4" />;
      default: return <CheckCircle className="w-4 h-4" />;
    }
  };

  const completedTasks = dailyTasks.filter(task => task.completed).length;
  const totalTasks = dailyTasks.length;
  const completionPercentage = (completedTasks / totalTasks) * 100;

  return (
    <div className="p-6 space-y-6">
      {/* Wellness Nudges */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <Card className="border-blue-200 bg-blue-50">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <Droplets className="w-5 h-5 text-blue-500" />
              <div className="flex-1">
                <p className="text-sm">{t.hydrationReminder}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card className="border-orange-200 bg-orange-50">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <AlertCircle className="w-5 h-5 text-orange-500" />
              <div className="flex-1">
                <p className="text-sm">{t.breakReminder}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card className="border-green-200 bg-green-50">
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <Brain className="w-5 h-5 text-green-500" />
              <div className="flex-1">
                <p className="text-sm">{t.posthureReminder}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Health Metrics */}
        <div className="space-y-4">
          <h3>{t.healthMetrics}</h3>
          
          <div className="grid grid-cols-2 gap-4">
            {wellnessMetrics.map((metric) => (
              <Card key={metric.id}>
                <CardContent className="p-4">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <span className={metric.color}>{metric.icon}</span>
                      <span className="text-sm">{metric.name}</span>
                    </div>
                    <Button 
                      size="sm" 
                      variant="outline"
                      onClick={() => updateMetric(metric.id, 1)}
                    >
                      <Plus className="w-3 h-3" />
                    </Button>
                  </div>
                  
                  <div className="space-y-2">
                    <Progress 
                      value={(metric.current / metric.target) * 100} 
                      className="w-full" 
                    />
                    <p className="text-xs text-muted-foreground">
                      {metric.current}/{metric.target} {metric.unit}
                    </p>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>

          {/* Mindfulness Section */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Brain className="w-5 h-5 text-purple-500" />
                {t.mindfulMoment}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Button variant="outline" className="w-full">
                {t.breatheWith}
              </Button>
              <div className="text-center">
                <div className="w-16 h-16 mx-auto bg-gradient-to-r from-blue-400 to-purple-500 rounded-full flex items-center justify-center animate-pulse">
                  <Heart className="w-8 h-8 text-white" />
                </div>
                <p className="text-sm text-muted-foreground mt-2">
                  Breathe in... Breathe out...
                </p>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Daily Planning */}
        <div className="space-y-4">
          <div className="flex justify-between items-center">
            <h3>{t.dailyPlanning}</h3>
            <Button size="sm">
              <Plus className="w-4 h-4 mr-2" />
              {t.addTask}
            </Button>
          </div>

          {/* Progress Overview */}
          <Card>
            <CardHeader>
              <CardTitle className="text-sm">{t.dailyGoal}</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <Progress value={completionPercentage} className="w-full" />
                <p className="text-xs text-muted-foreground">
                  {completedTasks}/{totalTasks} tasks completed
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Task List */}
          <div className="space-y-3">
            <h4>{t.todaysTasks}</h4>
            {dailyTasks.map((task) => (
              <Card key={task.id} className={task.completed ? 'opacity-60' : ''}>
                <CardContent className="p-4">
                  <div className="flex items-center gap-3">
                    <Checkbox
                      checked={task.completed}
                      onCheckedChange={() => toggleTask(task.id)}
                    />
                    
                    <div className="flex-1">
                      <p className={`text-sm ${task.completed ? 'line-through' : ''}`}>
                        {task.task}
                      </p>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      {getCategoryIcon(task.category)}
                      <Badge 
                        variant="secondary" 
                        className={getPriorityColor(task.priority)}
                      >
                        {t[task.priority as keyof typeof t]}
                      </Badge>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </div>

      {/* Current Time Display */}
      <Card className="text-center">
        <CardContent className="p-4">
          <div className="flex items-center justify-center gap-2">
            <Clock className="w-5 h-5 text-muted-foreground" />
            <p className="text-lg">
              {currentTime.toLocaleTimeString([], { 
                hour: '2-digit', 
                minute: '2-digit',
                second: '2-digit'
              })}
            </p>
          </div>
          <p className="text-sm text-muted-foreground">
            {currentTime.toLocaleDateString()}
          </p>
        </CardContent>
      </Card>
    </div>
  );
}